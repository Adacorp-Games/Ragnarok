# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Build with Maven
      run: mvn package
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PIERREANTOINE_KEY }}
      with:
        tag_name: ${{GITHUB_RUN_NUMBER}}
        release_name: Release ${{GITHUB_RUN_NUMBER}}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PIERREANTOINE_KEY }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./Lancement/ragnarok.jar
        asset_name: ragnarok.jar
        asset_content_type: application/java-archive

#  publish-job:
#   runs-on: ubuntu-latest
#   needs: [build]
#   steps:
#    - run: mkdir staging && cp Lancement/ragnarok.jar staging
#    - uses: actions/upload-artifact@v1
#      with:
#        name: ragnarok.jar
#        path: staging
